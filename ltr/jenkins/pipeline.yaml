# common configuration
task-config: &task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: python
      tag: 3.7
      username: ((docker_hub_username))
      password: ((docker_hub_authtoken))

notify-failure: &notify-failure
  put: govuk-searchandnav-slack
  params:
    channel: '#govuk-searchandnav'
    username: 'Weekly LTR'
    icon_emoji: ':concourse:'
    silent: true
    text: |
      :kaboom:
      The $BUILD_JOB_NAME Concourse job has failed
      Failed build: http://cd.gds-reliability.engineering/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

# proper configuration begins
resource_types:
- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-resource
    tag: latest
    username: ((docker_hub_username))
    password: ((docker_hub_authtoken))
- name: s3-iam
  type: docker-image
  source:
    repository: governmentpaas/s3-resource
    tag: 97e441efbfb06ac7fb09786fd74c64b05f9cc907
    username: ((docker_hub_username))
    password: ((docker_hub_authtoken))
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
    username: ((docker_hub_username))
    password: ((docker_hub_authtoken))

resources:
- name: sundays-at-10pm
  type: cron-resource
  source:
    expression: "00 22 * * SUN"
    location: "Europe/London"
- name: search-api-git
  type: git
  source:
    uri: https://github.com/alphagov/search-api.git
- name: govuk-searchandnav-slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))
- name: integration-training-data
  type: s3-iam
  source:
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    regexp: search-learn-to-rank/integration-training-data-(.*).txt
- name: staging-training-data
  type: s3-iam
  source:
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    regexp: search-learn-to-rank/staging-training-data-(.*).txt
- name: production-training-data
  type: s3-iam
  source:
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    regexp: search-learn-to-rank/production-training-data-(.*).txt
- name: integration-model
  type: s3-iam
  source:
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    regexp: search-learn-to-rank/integration-model-([0-9]*).txt
- name: staging-model
  type: s3-iam
  source:
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    regexp: search-learn-to-rank/staging-model-(.*).txt
- name: production-model
  type: s3-iam
  source:
    bucket: ((readonly_private_bucket_name))
    region_name: eu-west-2
    regexp: search-learn-to-rank/production-model-(.*).txt

jobs:
- name: update-pipeline
  plan:
    - get: search-api-git
      trigger: true
    - set_pipeline: search-learn-to-rank
      file: search-api-git/ltr/concourse/pipeline.yaml
- name: integration-fetch
  plan:
    - get: sundays-at-10pm
      trigger: true
    - get: search-api-git
    - task: fetch
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
        outputs:
          - name: out
        params:
          GOVUK_ENVIRONMENT: integration
          ROLE_ARN: ((integration-role-arn))
          BIGQUERY_CREDENTIALS: ((bigquery-credentials))
          SSH_PRIVATE_KEY: ((ssh-private-key))
          ELASTICSEARCH_URI: https://vpc-blue-elasticsearch6-domain-uolbxqjhkiqmg5w3gg7gio5sty.eu-west-1.es.amazonaws.com
          OUTPUT_FILE_NAME: training-data
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/fetch.sh"]
    - put: integration-training-data
      params:
        file: out/integration-training-data-*.txt
- name: integration-train
  plan:
    - get: integration-training-data
      passed: [integration-fetch]
      trigger: true
    - get: search-api-git
    - task: train
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
          - name: integration-training-data
        outputs:
          - name: out
        params:
          GOVUK_ENVIRONMENT: integration
          IMAGE: ((integration-ecr-repository))
          ROLE_ARN: ((integration-role-arn))
          INPUT_FILE_NAME: training-data
          OUTPUT_FILE_NAME: model
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/task.sh", "train"]
    - put: integration-model
      params:
        file: out/integration-model-*.txt
- name: integration-deploy
  plan:
    - get: integration-model
      passed: [integration-train]
      trigger: true
    - get: search-api-git
    - task: deploy
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
          - name: integration-model
        params:
          GOVUK_ENVIRONMENT: integration
          ROLE_ARN: ((integration-role-arn))
          INPUT_FILE_NAME: model
          INSTANCE_COUNT: 2
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/task.sh", "deploy"]
- name: staging-fetch
  plan:
    - get: sundays-at-10pm
      trigger: true
    - get: search-api-git
    - task: fetch
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
        outputs:
          - name: out
        params:
          GOVUK_ENVIRONMENT: staging
          ROLE_ARN: ((staging-role-arn))
          BIGQUERY_CREDENTIALS: ((bigquery-credentials))
          SSH_PRIVATE_KEY: ((ssh-private-key))
          ELASTICSEARCH_URI: https://vpc-blue-elasticsearch6-domain-uibh77cu2kiudtl76uhseobfzq.eu-west-1.es.amazonaws.com
          OUTPUT_FILE_NAME: training-data
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/fetch.sh"]
    - put: staging-training-data
      params:
        file: out/staging-training-data-*.txt
- name: staging-train
  plan:
    - get: staging-training-data
      passed: [staging-fetch]
      trigger: true
    - get: search-api-git
    - task: train
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
          - name: staging-training-data
        outputs:
          - name: out
        params:
          GOVUK_ENVIRONMENT: staging
          IMAGE: ((staging-ecr-repository))
          ROLE_ARN: ((staging-role-arn))
          INPUT_FILE_NAME: training-data
          OUTPUT_FILE_NAME: model
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/task.sh", "train"]
    - put: staging-model
      params:
        file: out/staging-model-*.txt
- name: staging-deploy
  plan:
    - get: staging-model
      passed: [staging-train]
      trigger: true
    - get: search-api-git
    - task: deploy
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
          - name: staging-model
        params:
          GOVUK_ENVIRONMENT: staging
          ROLE_ARN: ((staging-role-arn))
          INPUT_FILE_NAME: model
          INSTANCE_TYPE: ml.c5.large
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/task.sh", "deploy"]
- name: production-fetch
  plan:
    - get: sundays-at-10pm
      trigger: true
    - get: search-api-git
    - task: fetch
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
        outputs:
          - name: out
        params:
          GOVUK_ENVIRONMENT: production
          ROLE_ARN: ((production-role-arn))
          BIGQUERY_CREDENTIALS: ((bigquery-credentials))
          SSH_PRIVATE_KEY: ((ssh-private-key))
          ELASTICSEARCH_URI: https://vpc-blue-elasticsearch6-domain-2hnib7uydv3tgebhabx74gdelq.eu-west-1.es.amazonaws.com
          OUTPUT_FILE_NAME: training-data
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/fetch.sh"]
      on_failure:
        <<: *notify-failure
    - put: production-training-data
      params:
        file: out/production-training-data-*.txt
- name: production-train
  plan:
    - get: production-training-data
      passed: [production-fetch]
      trigger: true
    - get: search-api-git
    - task: train
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
          - name: production-training-data
        outputs:
          - name: out
        params:
          GOVUK_ENVIRONMENT: production
          IMAGE: ((production-ecr-repository))
          ROLE_ARN: ((production-role-arn))
          INPUT_FILE_NAME: training-data
          OUTPUT_FILE_NAME: model
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/task.sh", "train"]
      on_failure:
        <<: *notify-failure
    - put: production-model
      params:
        file: out/production-model-*.txt
- name: production-deploy
  plan:
    - get: production-model
      passed: [production-train]
      trigger: true
    - get: search-api-git
    - task: deploy
      config:
        <<: *task-config
        inputs:
          - name: search-api-git
          - name: production-model
        params:
          GOVUK_ENVIRONMENT: production
          ROLE_ARN: ((production-role-arn))
          INPUT_FILE_NAME: model
          INSTANCE_COUNT: 6
          INSTANCE_TYPE: ml.c5.xlarge
        run:
          path: bash
          args: ["search-api-git/ltr/concourse/task.sh", "deploy"]
      on_failure:
        <<: *notify-failure
